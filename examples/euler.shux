let scalar dt = 0.01;
let scalar g = -9.81;

/* 1D particle data structure with pos and vel */
struct particle {
   scalar x;
   scalar v;
}

gn euler(struct particle[] init) struct particle[] {
   struct particle[] pbuf = pbuf..1 : init @ p -> {
      /* couldn't we use the kernel here? */
      particle {
         .v = p.v + g * dt;
	 .x = p.x + p.v * dt;
      }
   }
}

kn main() int {
   var particle[1] p_init = [particle { .v=1; .x=0; }];
   
   for 1000 euler(p_init) @ (particle[] state) -> {
      print("step"); /* we don't have opengl bindings yet */
      print_scalar(state[0].x);
   }

   0
}
   